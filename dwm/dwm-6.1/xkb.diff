diff --git a/config.def.h b/config.def.h
index 875885b..780ff6f 100644
--- a/dwm.c
+++ b/dwm.c
@@ -1490,6 +1566,7 @@ setmfact(const Arg *arg) {
 void
 setup(void) {
    XSetWindowAttributes wa;
+    XkbStateRec xkbstate;
 
    /* clean up any zombies immediately */
    sigchld(0);
@@ -1541,6 +1618,16 @@ setup(void) {
                    |EnterWindowMask|LeaveWindowMask|StructureNotifyMask|PropertyChangeMask;
    XChangeWindowAttributes(dpy, root, CWEventMask|CWCursor, &wa);
    XSelectInput(dpy, root, wa.event_mask);
+
+    /* get xkb extension info, events and current state */
+    if (!XkbQueryExtension(dpy, NULL, &xkbEventType, NULL, NULL, NULL)) {
+       fputs("warning: can not query xkb extension\n", stderr);
+    }
+    XkbSelectEventDetails(dpy, XkbUseCoreKbd, XkbStateNotify,
+                          XkbAllStateComponentsMask, XkbGroupStateMask);
+    XkbGetState(dpy, XkbUseCoreKbd, &xkbstate);
+    xkbGlobal.group = xkbstate.locked_group;
+
    grabkeys();
    focus(NULL);
 }
@@ -1687,6 +1774,7 @@ void
 unmanage(Client *c, Bool destroyed) {
    Monitor *m = c->mon;
    XWindowChanges wc;
+    XkbInfo *xkb;
 
    /* The server grab construct avoids race conditions. */
    detach(c);
@@ -1702,6 +1790,18 @@ unmanage(Client *c, Bool destroyed) {
        XSetErrorHandler(xerror);
        XUngrabServer(dpy);
    }
+    else {
+        xkb = findxkb(c->win);
+        if (xkb != NULL) {
+            if (xkb->prev) {
+                xkb->prev->next = xkb->next;
+            }
+            if (xkb->next) {
+                xkb->next->prev = xkb->prev;
+            }
+            free(xkb);
+        }
+    }
    free(c);
    focus(NULL);
    updateclientlist();
@@ -2030,6 +2130,23 @@ xerrorstart(Display *dpy, XErrorEvent *ee) {
    return -1;
 }
 
+void xkbeventnotify(XEvent *e)
+{
+    XkbEvent *ev;
+
+    ev = (XkbEvent *) e;
+    switch (ev->any.xkb_type) {
+    case XkbStateNotify:
+        xkbGlobal.group = ev->state.locked_group;
+        if (selmon != NULL && selmon->sel != NULL) {
+            selmon->sel->xkb->group = xkbGlobal.group;
+        }
+        if (showxkb) {
+            drawbars();
+        }
+        break;
+    }
+}
 void
 zoom(const Arg *arg) {
    Client *c = selmon->sel;
