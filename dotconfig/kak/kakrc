
# Examples
# /usr/share/kak/

set-option global tabstop 4
set-option global indentwidth 4

# command line
map global normal <c-e> ':'
map global insert <c-e> '<esc>:'

# save
map global normal <c-s> ':w<ret>'
map global insert <c-s> '<esc>:w<ret>'

#close
map global normal <c-w> ':delete-buffer<ret>'
map global normal <c-q> ':q!<ret>'

# make from build folder
# set global makecmd 'cd build; make'
map global normal <c-m> ':make -C build<ret>'

# search in files
set global grepcmd 'ag --ignore tags --ignore node_modules/ --column'
map global normal <c-f> ':grep '
map global normal <c-F> 'bey:grep <c-r>.<ret>'

# switch buffer
map global normal <c-b> ':b '

# buffers
# map global normal  ':buffer-previous<ret>'
# map global normal . ':buffer-next<ret>'

# map global normal <tab>     '<a-;><gt>'
# map global normal <backtab> '<a-;><lt>'
# map global insert <tab>     '<a-;><gt>'
# map global insert <backtab> '<a-;><lt>'

# select word > yank to search register 
map global normal <c-d> 'be"/y'

map global normal <c-g> 'be:ctags-search<ret>'

map global normal <c-h> ':c-family-alternative-file<ret>'
map global insert <c-h> '<esc>:c-family-alternative-file<ret>'

map global normal <c-/> ':comment-line<ret>'
map global normal <c-/> '<esc>:comment-line<ret>'

# map global insert <c-h> ':c-family-alternative-file<ret>'
# map global normal <c-h> ':c-family-alternative-file<ret>'

# map global user r ':source %val{buffile}<ret>'
# map global user e ':eval %val{selection}<ret>'
# map global user c ':e ~/.config/kak/kakrc<ret>'
# map global user h ':e ~/cfg/kakoune.md<ret>'

# colcolorscheme lucius 

# map global normal <space> ,
# map global normal , <space>

# map global normal n <left>
# map global normal e <down>
# map global normal u <up>
# map global normal o <right>

# map global normal <c-u> u

# map global normal <a-n> <left>
# map global insert <a-n> <left>
# map global normal <a-o> <right>
# map global insert <a-o> <right>
# map global normal <a-u> <up>
# map global insert <a-u> <up>
# map global normal <a-e> <down>
# map global insert <a-e> <down>

# select all
# map global normal <c-a> %

# map global normal <a-N> H
# map global normal <a-E> J
# map global normal <a-U> K
# map global normal <a-O> L

# def find -params 1 -shell-candidates %{ find -type f } %{ edit %arg{1} }
def find -params 1 -shell-candidates %{ git ls-files } %{ edit %arg{1} }
map global normal <c-p> ':find '

# Space menu
map global normal <space> :space-fn<ret>
# map global user r ':source %val{buffile}<ret>'
def -hidden -allow-override space-fn %{
  info -title config %{
    e: edit
    s: select
    c: open config
    r: reload config
    b: buffers
    f: format
    h: header/source
  }
  on-key %{ %sh{
    case $kak_key in
      '<space>') echo exec "<space>"                        ;;
      e) echo exec ':e<space>'                              ;;
      s) echo select-fn                                     ;;
      c) echo edit ~/.config/kak/kakrc                      ;;
      r) echo exec ':source<space>~/.config/kak/kakrc<ret>' ;;
      b) echo buffer-fn                                     ;;
      f) clang-format -i $kak_buffile                       ;;
      h) echo exec ':c-family-alternative-file<ret>'        ;;
    esac
  }}
}

# Select
def -hidden -allow-override select-fn %{
  info -title Select %{
      a: All
      p: Paragraph
      i: Indent
      e: Eval
  }
  on-key %{ %sh{
    case $kak_key in
      a) echo exec '<%>'                               ;;
      p) echo exec '<a-a>p'                            ;;
      i) echo exec '<a-a>i'                            ;;
      e) echo exec ':eval <space>%val{selection}<ret>' ;;
    esac
  }}
}

# Buffer
def -hidden -allow-override buffer-fn %{
  info -title 'Buffer commands' %{
    b: buffer
    n: next
    p: previous
    d: debug
  }
  on-key %{ %sh{
    case $kak_key in
      b) echo exec ':b<space>' ;;
      n) echo buffer-next      ;;
      p) echo buffer-previous  ;;
      d) echo buffer '*debug*' ;;
    esac
  }}
}

def -docstring 'invoke fzf to open a file' \
  fzf-file %{ %sh{
    if [ -z "$TMUX" ]; then
      echo echo only works inside tmux
    else
      FILE=$(find * -type f | fzf-tmux -d 15)
      if [ -n "$FILE" ]; then
        printf 'eval -client %%{%s} edit %%{%s}\n' "${kak_client}" "${FILE}" | kak -p "${kak_session}"
      fi
    fi
} }

def -docstring 'invoke fzf to select a buffer' \
  fzf-buffer %{ %sh{
    if [ -z "$TMUX" ]; then
      echo echo only works inside tmux
    else
      BUFFER=$(printf %s\\n "${kak_buflist}" | tr : '\n' | fzf-tmux -d 15)
      if [ -n "$BUFFER" ]; then
        echo "eval -client '$kak_client' 'buffer ${BUFFER}'" | kak -p ${kak_session}
      fi
    fi
} }

# SPACE menu
# map global normal <space> :space-fn<ret>
# def -allow-override space-fn %{
#     %sh{
#     	categories=()
#     	keys=()
#         cmds=()
#         infos=()
#         IFS=,
#         while IFS=, read key cmd info
#         do
#             keys+=($key)
#             cmds+=($cmd)
#             infos+=($info)
#         done < ~/.config/kak/.spacefn
# 
#         # info popup 
# 	infopopup=""
#         for ((i=0;i<${#keys[@]};++i)); do
#             printf -v line "%s\n" "${infos[i]}"
#             infopopup+=$line
#         done
#         echo "info -title $$ \"$infopopup\""
# 
#         # key events
# 	onkey='on-key %{%sh{ case $kak_key in '
#         for ((i=0;i<${#keys[@]};++i)); do
#             printf -v line "(%s) %s ;;" "${keys[i]}" "${cmds[i]}"
#             onkey+=$line
#         done
#         onkey+='esac}}'
#         echo $onkey
#     }
# }

